import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const vaultPath =
    "/Users/ruben/Library/Mobile Documents/iCloud~md~obsidian/Documents/git-notes-in-icloud/.obsidian/plugins/clau";
const prod = process.argv[2] === "production";

// --- NEW: A proper on-rebuild plugin ---
const copyOnEndPlugin = {
    name: "copy-on-end",
    setup: (build) => {
        build.onEnd(async (result) => {
            if (result.errors.length > 0) return;
            console.log(`Build ended for ${build.initialOptions.entryPoints[0]}, copying files...`);
            await copyFiles();
        });
    },
};

async function copyFiles() {
    await fs.mkdir(vaultPath, { recursive: true });
    // Main plugin files
    await fs.cp("main.js", path.join(vaultPath, "main.js")).catch(() => {});
    await fs.cp("manifest.json", path.join(vaultPath, "manifest.json")).catch(() => {});
    await fs.cp("styles.css", path.join(vaultPath, "styles.css")).catch(() => {});
    // Visualization bundle
    await fs.cp("viz-bundle.js", path.join(vaultPath, "viz-bundle.js")).catch(() => {});
}

const mainPluginConfig = {
    banner: { js: banner },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
        "obsidian", "electron", "@codemirror/autocomplete", "@codemirror/collab",
        "@codemirror/commands", "@codemirror/language", "@codemirror/lint",
        "@codemirror/search", "@codemirror/state", "@codemirror/view",
        "@lezer/common", "@lezer/highlight", "@lezer/lr", ...builtins,
    ],
    format: "cjs",
    target: "es2020",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    minify: prod,
    plugins: [copyOnEndPlugin], // Use the plugin here
};

const vizAppConfig = {
    entryPoints: ["viz-app.ts"],
    bundle: true,
    format: "iife",
    target: "es2020",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "viz-bundle.js",
    minify: prod,
    plugins: [copyOnEndPlugin], // And also here
};

if (prod) {
    await esbuild.build(mainPluginConfig);
    await esbuild.build(vizAppConfig);
} else {
    const mainCtx = await esbuild.context(mainPluginConfig);
    const vizCtx = await esbuild.context(vizAppConfig);
    await mainCtx.watch();
    await vizCtx.watch();
    console.log("Watching for changes...");
}