// src/vectorize-modal.ts
import { App, Modal, Notice, TextAreaComponent } from "obsidian";
import ClauPlugin from "./main";

export class VectorizeModal extends Modal {
    plugin: ClauPlugin;
    word: string;
    text: string = "";

    constructor(app: App, plugin: ClauPlugin, word: string) {
        super(app);
        this.plugin = plugin;
        this.word = word;
    }

    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.createEl("h2", { text: `Vectorize "${this.word}"` });

        contentEl.createEl("p", {
            text: "Paste a large body of text containing the word in context. The vector will be generated by averaging the vectors of the surrounding words.",
        });

        new TextAreaComponent(contentEl)
            .setValue(this.text)
            .onChange((value) => (this.text = value))
            .inputEl.setAttr("style", "width: 100%; min-height: 200px;");

        const buttonContainer = contentEl.createDiv({
            cls: "modal-button-container",
        });

        buttonContainer.createEl("button", {
            text: "Cancel",
            cls: "mod-cta",
        }).addEventListener("click", () => this.close());

        buttonContainer.createEl("button", {
            text: "Generate Vector",
            cls: "mod-cta",
        }).addEventListener("click", async () => {
            if (!this.text.trim()) {
                new Notice("Text corpus cannot be empty.");
                return;
            }
            this.generateAndSaveVector();
            this.close();
        });
    }

    async generateAndSaveVector() {
        const { semanticSearchProvider } = this.plugin;
        const vectors = await semanticSearchProvider.getVectors();
        if (!vectors || vectors.size === 0) {
            new Notice("Vector model not loaded. Cannot generate vector.");
            return;
        }

        // This is a simplified version of the logic in indexer.ts
        const words = (this.text.toLowerCase().match(/\b\w+\b/g) || [])
            .filter(w => w !== this.word.toLowerCase() && !STOPWORDS.has(w));

        const knownVectors = words
            .map((word) => vectors.get(word))
            .filter((v) => v) as number[][];

        if (knownVectors.length === 0) {
            new Notice("No known words found in the provided text. Could not generate vector.");
            return;
        }

        const dimension = knownVectors[0].length;
        const sumVector = new Array(dimension).fill(0);

        for (const vec of knownVectors) {
            for (let i = 0; i < dimension; i++) {
                sumVector[i] += vec[i];
            }
        }

        const newVector = sumVector.map((val) => val / knownVectors.length);

        await semanticSearchProvider.saveCustomVector(this.word, newVector);
        new Notice(`Custom vector for "${this.word}" has been generated and saved.`);
    }

    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

// Re-using the same stopword list from indexer.ts
const STOPWORDS = new Set([
    "a", "about", "above", "after", "again", "against", "all", "am", "an", "and",
    "any", "are", "aren't", "as", "at", "be", "because", "been", "before", "being",
    "below", "between", "both", "but", "by", "can't", "cannot", "could", "couldn't",
    "did", "didn't", "do", "does", "doesn't", "doing", "don't", "down", "during",
    "each", "few", "for", "from", "further", "had", "hadn't", "has", "hasn't",
    "have", "haven't", "having", "he", "he'd", "he'll", "he's", "her", "here",
    "here's", "hers", "herself", "him", "himself", "his", "how", "how's", "i",
    "i'd", "i'll", "i'm", "i've", "if", "in", "into", "is", "isn't", "it", "it's",
    "its", "itself", "let's", "me", "more", "most", "mustn't", "my", "myself",
    "no", "nor", "not", "of", "off", "on", "once", "only", "or", "other", "ought",
    "our", "ours", "ourselves", "out", "over", "own", "same", "shan't", "she",
    "she'd", "she'll", "she's", "should", "shouldn't", "so", "some", "such",
    "than", "that", "that's", "the", "their", "theirs", "them", "themselves",
    "then", "there", "there's", "these", "they", "they'd", "they'll", "they're",
    "they've", "this", "those", "through", "to", "too", "under", "until", "up",
    "very", "was", "wasn't", "we", "we'd", "we'll", "we're", "we've", "were",
    "weren't", "what", "what's", "when", "when's", "where", "where's", "which",
    "while", "who", "who's", "whom", "why", "why's", "with", "won't", "would",
    "wouldn't", "you", "you'd", "you'll", "you're", "you've", "your", "yours",
    "yourself", "yourselves"
]);
